[gd_scene load_steps=1 format=2]

[sub_resource id=1 type="Shader"]

resource_name = "Shader Nodetree"
code = "shader_type spatial;
render_mode blend_mix, depth_draw_always, cull_back, diffuse_burley, specular_schlick_ggx;



void node_bsdf_principled(vec4 color, float subsurface, vec4 subsurface_color,
        float metallic, float specular, float roughness, float clearcoat,
        float clearcoat_roughness, float anisotropy, float transmission,
        float IOR, out vec3 albedo, out float sss_strength_out,
        out float metallic_out, out float specular_out,
        out float roughness_out, out float clearcoat_out,
        out float clearcoat_gloss_out, out float anisotropy_out,
        out float transmission_out, out float ior) {
    metallic = clamp(metallic, 0.0, 1.0);
    transmission = clamp(transmission, 0.0, 1.0);

    subsurface = subsurface * (1.0 - metallic);

    albedo = mix(color.rgb, subsurface_color.rgb, subsurface);
    sss_strength_out = subsurface;
    metallic_out = metallic;
    specular_out = pow((IOR - 1.0)/(IOR + 1.0), 2)/0.08;
    roughness_out = roughness;
    clearcoat_out = clearcoat * (1.0 - transmission);
    clearcoat_gloss_out = 1.0 - clearcoat_roughness;
    anisotropy_out = clamp(anisotropy, 0.0, 1.0);
    transmission_out = (1.0 - transmission) * (1.0 - metallic);
    ior = IOR;
}

void vertex () {
}

void fragment () {
	
	// node: 'Principled BSDF'
	// type: 'ShaderNodeBsdfPrincipled'
	// input sockets handling
	vec4 node0_in0_basecolor = vec4(0.800000011920929, 0.800000011920929,
		0.800000011920929, 1.0);
	float node0_in1_subsurface = float(0.0);
	vec3 node0_in2_subsurfaceradius = vec3(1.0, 0.20000000298023224,
		0.10000000149011612);
	vec4 node0_in3_subsurfacecolor = vec4(0.800000011920929, 0.800000011920929,
		0.800000011920929, 1.0);
	float node0_in4_metallic = float(0.0);
	float node0_in5_specular = float(0.5);
	float node0_in6_speculartint = float(0.0);
	float node0_in7_roughness = float(0.4000000059604645);
	float node0_in8_anisotropic = float(0.0);
	float node0_in9_anisotropicrotation = float(0.0);
	float node0_in10_sheen = float(0.0);
	float node0_in11_sheentint = float(0.5);
	float node0_in12_clearcoat = float(0.0);
	float node0_in13_clearcoatroughness = float(0.029999999329447746);
	float node0_in14_ior = float(1.4500000476837158);
	float node0_in15_transmission = float(0.0);
	float node0_in16_transmissionroughness = float(0.0);
	vec4 node0_in17_emission = vec4(0.0, 0.0, 0.0, 1.0);
	float node0_in18_emissionstrength = float(1.0);
	float node0_in19_alpha = float(1.0);
	vec3 node0_in20_normal = NORMAL;
	vec3 node0_in21_clearcoatnormal = vec3(0.0, 0.0, 0.0);
	vec3 node0_in22_tangent = TANGENT;
	// output sockets definitions
	vec3 node0_bsdf_out0_albedo;
	float node0_bsdf_out1_sss_strength;
	float node0_bsdf_out3_specular;
	float node0_bsdf_out2_metallic;
	float node0_bsdf_out4_roughness;
	float node0_bsdf_out5_clearcoat;
	float node0_bsdf_out6_clearcoat_gloss;
	float node0_bsdf_out7_anisotropy;
	float node0_bsdf_out8_transmission;
	float node0_bsdf_out9_ior;
	
	node_bsdf_principled(node0_in0_basecolor, node0_in1_subsurface,
		node0_in3_subsurfacecolor, node0_in4_metallic, node0_in5_specular,
		node0_in7_roughness, node0_in12_clearcoat, node0_in13_clearcoatroughness,
		node0_in8_anisotropic, node0_in15_transmission, node0_in14_ior,
		node0_bsdf_out0_albedo, node0_bsdf_out1_sss_strength, node0_bsdf_out2_metallic,
		node0_bsdf_out3_specular, node0_bsdf_out4_roughness, node0_bsdf_out5_clearcoat,
		node0_bsdf_out6_clearcoat_gloss, node0_bsdf_out7_anisotropy,
		node0_bsdf_out8_transmission, node0_bsdf_out9_ior);
	
	
	ALBEDO = node0_bsdf_out0_albedo;
	SSS_STRENGTH = node0_bsdf_out1_sss_strength;
	SPECULAR = node0_bsdf_out3_specular;
	METALLIC = node0_bsdf_out2_metallic;
	ROUGHNESS = node0_bsdf_out4_roughness;
	CLEARCOAT = node0_bsdf_out5_clearcoat;
	CLEARCOAT_GLOSS = node0_bsdf_out6_clearcoat_gloss;
	NORMAL = node0_in20_normal;
	// uncomment it when you need it
	// TRANSMISSION = vec3(1.0, 1.0, 1.0) * node0_bsdf_out8_transmission;
	// uncomment it when you are modifing TANGENT
	// TANGENT = normalize(cross(cross(node0_in22_tangent, NORMAL), NORMAL));
	// BINORMAL = cross(TANGENT, NORMAL);
	// uncomment it when you have tangent(UV) set
	// ANISOTROPY = node0_bsdf_out7_anisotropy;
}
"

[sub_resource id=2 type="ShaderMaterial"]

resource_name = ""
shader = SubResource(1)

[sub_resource id=3 type="ArrayMesh"]

resource_name = "Cube"
surfaces/0 = {
	"material":SubResource(2),
	"primitive":4,
	"arrays":[
		Vector3Array(-25.9403, -1.56344, -25.9403, 25.9403, -1.56344, -25.9403, 25.9403, -1.56344, 25.9403, -25.9403, -1.56344, 25.9403, -26.3894, -1.11836, 25.9443, -26.4044, 0.554916, 25.9593, -26.4044, 0.554916, -25.9593, -26.3894, -1.11836, -25.9443, 25.9443, -1.11836, 26.3894, 25.9593, 0.554916, 26.4044, -25.9593, 0.554916, 26.4044, -25.9443, -1.11836, 26.3894, 25.9633, 1.0, -25.9633, -25.9633, 1.0, -25.9633, -25.9633, 1.0, 25.9633, 25.9633, 1.0, 25.9633, 26.3894, -1.11836, -25.9443, 26.4044, 0.554916, -25.9593, 26.4044, 0.554916, 25.9593, 26.3894, -1.11836, 25.9443, 25.9593, 0.554916, -26.4044, 25.9633, 1.0, -25.9633, 26.4044, 0.554916, -25.9593, 25.9443, -1.11836, -26.3894, 26.3894, -1.11836, -25.9443, 26.4044, 0.554916, 25.9593, 25.9633, 1.0, 25.9633, 25.9593, 0.554916, 26.4044, 26.3894, -1.11836, 25.9443, 25.9443, -1.11836, 26.3894, 25.9403, -1.56344, 25.9403, -25.9593, 0.554916, -26.4044, -26.4044, 0.554916, -25.9593, -25.9633, 1.0, -25.9633, -26.3894, -1.11836, -25.9443, -25.9443, -1.11836, -26.3894, -25.9403, -1.56344, -25.9403, -25.9593, 0.554916, 26.4044, -25.9633, 1.0, 25.9633, -25.9443, -1.11836, 26.3894, -26.3894, -1.11836, 25.9443, -26.3894, -1.11836, -25.9443, -25.9443, -1.11836, -26.3894, 25.9443, -1.11836, -26.3894, -25.9443, -1.11836, 26.3894, -25.9593, 0.554916, -26.4044, -25.9443, -1.11836, -26.3894, 25.9633, 1.0, 25.9633, -25.9633, 1.0, 25.9633, 25.9443, -1.11836, 26.3894, -25.9633, 1.0, -25.9633, -25.9633, 1.0, -25.9633),
		Vector3Array(-0.339122, -0.877468, -0.339122, 0.339122, -0.877468, -0.339122, 0.339122, -0.877468, 0.339122, -0.339122, -0.877468, 0.339122, -0.872951, -0.349376, 0.340312, -0.878109, 0.33372, 0.342784, -0.878109, 0.33372, -0.342784, -0.872951, -0.349376, -0.340312, 0.340312, -0.349376, 0.872951, 0.342784, 0.33372, 0.878109, -0.342784, 0.33372, 0.878109, -0.340312, -0.349376, 0.872951, 0.344066, 0.873623, -0.344066, -0.344066, 0.873623, -0.344066, -0.344066, 0.873623, 0.344066, 0.344066, 0.873623, 0.344066, 0.872951, -0.349376, -0.340312, 0.878109, 0.33372, -0.342784, 0.878109, 0.33372, 0.342784, 0.872951, -0.349376, 0.340312, 0.342784, 0.33372, -0.878109, 0.344066, 0.873623, -0.344066, 0.878109, 0.33372, -0.342784, 0.340312, -0.349376, -0.872951, 0.872951, -0.349376, -0.340312, 0.878109, 0.33372, 0.342784, 0.344066, 0.873623, 0.344066, 0.342784, 0.33372, 0.878109, 0.872951, -0.349376, 0.340312, 0.340312, -0.349376, 0.872951, 0.339122, -0.877468, 0.339122, -0.342784, 0.33372, -0.878109, -0.878109, 0.33372, -0.342784, -0.344066, 0.873623, -0.344066, -0.872951, -0.349376, -0.340312, -0.340312, -0.349376, -0.872951, -0.339122, -0.877468, -0.339122, -0.342784, 0.33372, 0.878109, -0.344066, 0.873623, 0.344066, -0.340312, -0.349376, 0.872951, -0.872951, -0.349376, 0.340312, -0.872951, -0.349376, -0.340312, -0.340312, -0.349376, -0.872951, 0.340312, -0.349376, -0.872951, -0.340312, -0.349376, 0.872951, -0.342784, 0.33372, -0.878109, -0.340312, -0.349376, -0.872951, 0.344066, 0.873623, 0.344066, -0.344066, 0.873623, 0.344066, 0.340312, -0.349376, 0.872951, -0.344066, 0.873623, -0.344066, -0.344066, 0.873623, -0.344066),
		FloatArray(0.936706, -0.34832, -0.0354231, 1.0, 0.933105, 0.359594, 0.00266486, 1.0, 0.936529, 0.348981, -0.0335367, 1.0, 0.933305, -0.359058, 0.00424984, 1.0, -0.323542, 0.936974, 0.131911, 1.0, 0.356534, 0.934275, 0.00376427, 1.0, 0.345491, 0.938, 0.0281353, 1.0, -0.323593, 0.936975, -0.13178, 1.0, 0.131732, 0.936975, 0.323612, 1.0, -0.0280825, 0.937995, -0.34551, 1.0, -0.0165996, 0.932472, -0.360862, 1.0, -0.131882, 0.936974, 0.323553, 1.0, -0.929781, 0.368081, 0.00481849, 1.0, -0.938947, -0.320129, 0.126079, 1.0, -0.938947, -0.320129, -0.126079, 1.0, -0.929786, 0.36807, -0.00478428, 1.0, 0.356206, 0.933349, -0.044462, 1.0, -0.345513, 0.937994, 0.0280752, 1.0, -0.345457, 0.93801, -0.0282318, 1.0, 0.356148, 0.933363, 0.0446233, 1.0, 0.00383231, 0.934266, 0.356557, 1.0, -0.134892, 0.408642, 0.902672, 1.0, 0.0050755, 0.709978, 0.704206, 1.0, 0.903511, 0.378698, 0.20064, 1.0, 0.414221, 0.899503, 0.138981, 1.0, -0.401029, 0.9042, 0.14696, 1.0, -0.902657, 0.408657, -0.134946, 1.0, -0.704199, 0.709984, 0.00507024, 1.0, 0.00517985, 0.704355, 0.709829, 1.0, -0.13139, 0.901613, 0.412105, 1.0, 0.143835, 0.404635, 0.903096, 1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 0.414221, -0.899503, -0.138981, 1.0, 0.714127, -0.700014, 0.00176646, 1.0, 0.905213, -0.402523, 0.136255, 1.0, 0.373407, 0.90616, -0.1986, 1.0, 0.902663, 0.408651, -0.134924, 1.0, 0.90351, -0.378698, 0.20064, 1.0, 0.413938, -0.89979, 0.137964, 1.0, 0.413744, -0.899986, -0.137265, 1.0, 0.940318, -0.126445, -0.315935, 1.0, 0.131779, 0.936975, -0.323594, 1.0, -0.131956, 0.936974, 0.323524, 1.0, 0.0281826, 0.938005, 0.345475, 1.0, -0.131898, 0.936974, -0.323547, 1.0, -0.13492, 0.40865, -0.902664, 1.0, 0.134859, 0.408632, -0.902681, 1.0, 0.940318, 0.126444, -0.315935, 1.0, 0.902681, 0.408632, 0.134859, 1.0, 0.13493, 0.408652, 0.902661, 1.0),
		null, ; no Vertex Colors,
		Vector2Array(0.127109, 0.497891, 0.372891, 0.497891, 0.372891, 0.252109, 0.127109, 0.252109, 0.418407, 0.997892, 0.581593, 0.997892, 0.581593, 0.752108, 0.418407, 0.752108, 0.418407, 0.247892, 0.581593, 0.247893, 0.581593, 0.0021075, 0.418407, 0.00210816, 0.627107, 0.497893, 0.872893, 0.497893, 0.872893, 0.252107, 0.627107, 0.252107, 0.418407, 0.497892, 0.581593, 0.497892, 0.581593, 0.252108, 0.418407, 0.252108, 0.581593, 0.502108, 0.625, 0.502107, 0.581203, 0.5, 0.37291, 0.5, 0.375, 0.49791, 0.581593, 0.252108, 0.625, 0.252107, 0.581203, 0.25, 0.375019, 0.25209, 0.37291, 0.25, 0.372891, 0.25, 0.581203, 0.75, 0.581203, 0.75, 0.625, 0.752107, 0.124981, 0.49791, 0.12709, 0.5, 0.125, 0.497891, 0.581203, 1.0, 0.625, 0.997893, 0.12709, 0.25, 0.125, 0.25209, 0.125, 0.49791, 0.12709, 0.5, 0.418407, 0.502108, 0.418016, 1.0, 0.581593, 0.747892, 0.418407, 0.747892, 0.625, 0.247893, 0.625, 0.00210679, 0.37291, 0.25, 0.625, 0.752107, 0.625, 0.747893),
		null, ; No UV2,
		null, ; No Bones,
		null, ; No Weights,
		IntArray(0, 2, 1, 0, 3, 2, 4, 6, 5, 4, 7, 6, 8, 10, 9, 8, 11, 10, 12, 14, 13, 12, 15, 14, 16, 18, 17, 16, 19, 18, 20, 22, 21, 1, 24, 23, 25, 27, 26, 28, 30, 29, 31, 33, 32, 34, 36, 35, 5, 38, 37, 3, 40, 39, 0, 40, 3, 0, 41, 40, 1, 42, 0, 1, 23, 42, 17, 43, 16, 17, 20, 43, 44, 5, 37, 44, 4, 5, 9, 19, 8, 9, 18, 19, 45, 7, 46, 45, 6, 7, 47, 10, 48, 47, 9, 10, 12, 18, 15, 12, 17, 18, 3, 49, 2, 3, 39, 49, 38, 6, 50, 38, 5, 6, 51, 20, 21, 51, 45, 20, 2, 16, 1, 2, 19, 16, 46, 20, 45, 46, 43, 20)
	],
	"morph_arrays":[]
}

[node type="Spatial" name="Scene"]

[node name="Cube" type="MeshInstance" parent="."]

mesh = SubResource(3)
visible = true
transform = Transform(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)
